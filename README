AEM Test Framework
Installation
To use the framework in a maven project, first you must connect to the CQ Blueprints Maven Repository and add the following dependencies:

<dependency>
    <groupId>com.cqblueprints.testing</groupId>
    <artifactId>test-framework</artifactId>
    <version>0.6.0</version>
</dependency>
Alternatively, the jar file can be downloaded directly here.

Test Environment Setup
The framework loads the test environment from a json file. The structure of the file is as follows:

{
  "authorUrl" : "http://localhost:4502",
  "publishUrl" : "http://localhost:4503",
  "testUser" : "admin",
  "testPassword" : "admin",
  "version" : "6.0",
  "browser" : "firefox",
  "proxyEnabled" : "true"
}
By default, the framework will use a settings.json file located in the root directory of the project. Alternative locations for the file can be specified by using the TestEnvironmentLoader:

The authorUrl and publishUrl parameters point to the instance under test and the user and password refer to a user with the correct ACL to create, edit, and delete pages under the test page path. The confguration also contains the version of AEM being tested. Valid values for browser are firefox, chrome, ie and html. HTML is a headless version of a browser and is a quick way to run tests if an actual browser is not required. The last settings parameter determines if a browsermob-proxy will be set up to intercept requests. A value of a "true" will configure the proxy and apply BASIC authentication to requests so the tests will not need to log in. Additional information on the proxy can be found here

Usage
The testing framework uses JUnit and follows the same conventions for writing tests. To begin using the built in functionality, the test should extend the TestBase class and use the provided page objects which expose high level AEM functions that will simplify test writing and reduce the need to use low level selenium in your test cases.

The TestBase uses the environment variable to setup and instantiate the WebDriver. A proxy is loaded and connected to the WebDriver which will add authentication info to each request and collects performance data.

The correct version of each PageObject can be retrieved using the page factory. The example below shows how you can use selenium and the framework together to write test cases.

More Examples
Interactions:

The framework API provides ways to work with dialogs simply and efficiently. A simple example of how to input fields into dialogs is shown below:

The dialog is opened using the editComponent(name) method where the name refres to the CRX name of the component. The fillInDialogFieldByName method can be used to input values into the appropriate dialog field based on its html name attribute. After the dialog has been populated, you can use the confirmDialog() method to submit the dialog.

Classic UI:

Most tests can be converted between the new interface and classic interface with minimal changes. The new UI makes use of the side panel while the classic UI uses the sidekick for components. The example below demonstrates how to write a test for the classic UI

Workflows:

The test framework also supports workflows. The API provides an easy way to kick off workflows from the sidekick and supports advancing workflows through both the AuthorPage and InboxPage objects.

Static Methods
The test framework also exposes the option to perform actions through static methods provided by the AuthorPageActions class. This class can be used to access functionality inside of your own page objects or automation framework without having to directly instantiate any of the page objects inside the framework.